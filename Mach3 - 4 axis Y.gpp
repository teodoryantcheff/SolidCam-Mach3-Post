;
; Mach3 post for SolidCam 
; -----
; Setup: standard 3 axis mill. A axis rotary, along Y.
; Latest Revision:
;  - 2016-03-10 Cleanups
;

@init_post

    ; Non GPPL variables
    num_user_procs =    1
    ;line_labels    = TRUE     ; Jump to N...

    ; GPPL variables
    numeric_def_f   = '5.3'
    integer_def_f   = '5.0(p)'
    gcode_f         = '2.0(p)'
    mcode_f         = '2.0(p)'
    xpos_f          = '5.3'
    ypos_f          = '5.3'
    zpos_f          = '5.3'
    feed_f          = '4.3(p)'
;    tool_diameter_f = '5.3/1'
    apos_f          = '5.3'
    blknum_f        = '5.0(p)'
    blknum_gen      = false
    blknum_exist    = true
    blknum_letter   = 'N'
    end_block_text  = ''
    blknum          =    5
    blknum_delta    =    5
    blknum_max      = 999995


    input 'Trace Level'trace_level
    trace 'all':trace_level
endp

;-------------------

@start_of_file

    {'%'}
    {nl, 'O'program_number, ' (', part_name,')'}
    if rotate_used then
        gcode = 69
        {nb, 'G'gcode}
    endif
    if mirror_used then
        {nb, 'G50.1 X0 Y0'}
    endif
endp

;-------------------

@start_program
    {nb, '( --- Initialisation --- )'}
    {nb, 'G0 G40 G49 G80 G21'}
    {nb, '( --- Go To Machine Origin --- )'}
    {nb, 'G0 G53 Z0'}
    {nb, 'G0 G53 X0 Y0 A0'}
endp

;-------------------

@end_program
    {nb, 'G0 G53 Z0 M9'}
    {nb, 'G0 G53 X0 Y0 A0 M5'}
    {nl, 'M30'}
endp

;-------------------

@end_of_file
    label = first_user_proc
    {nl, '%'}
endp

;-------------------

@relative_mode
    gcode = 91
    {nb, 'G'gcode, ' '}
    skipline = FALSE
endp

;-------------------

@absolute_mode
    gcode = 90
    {nb, 'G'gcode, ' '}
    skipline = FALSE
endp

;-------------------

@machine_plane
    gcode = 17 ; XY default
    if machine_plane eq YZ
        gcode = 19
    endif
    if machine_plane eq ZX
        gcode = 18
    endif
    {nb, 'G'gcode}
endp

;-------------------

@call_proc
    {[' ('message, ')']}
    ;if active(parm1) then
    ;    gcode = 65
    ;    {nb, 'G'gcode, ' P'label, ' A'parm1, [' B'parm2], [' C'parm3]}
    ;else
        {nb, 'M98 P'label}
    ;endif
    if proc_count gt 1 then
        {' L'proc_count}
    endif
endp

;-------------------

@proc
    {nl, ':'label}
endp

;-------------------

@end_proc
    {nb, 'M99'}
endp

;----------------

@loop
    ; TODO
    ;local integer var_num

    ;var_num = loop_level + 20
    ;{nb, '#', var_num, ' = 0'}
    ;{nb, 'WHILE [#', var_num, ' LT ', loop_count, '] DO ', loop_level}
endp

;----------------

@end_loop
    ; TODO
    ;local integer var_num

    ;var_num = loop_level + 20
    ;{nb, '#', var_num, ' = #', var_num, ' + 1'}
    ;{nb, 'END ', loop_level}
endp

;----------------

@def_tool
;   {nb, '(G10 L1 P', (tool_number+1), ' R'tool_offset, ')'}
endp

;-------------------

@rapid_move
    gcode = 0
    {nb, ['G'gcode], [' X'xpos], [' Y'ypos], [' Z'zpos] }
endp

;-------------------

@line
    gcode = 1
    {nb, ['G'gcode], [' X'xpos], [' Y'ypos], [' Z'zpos], [' F'feed] }
endp
;-------------------

@move_4x
    gcode = 0
  
    local numeric a
    a = -cpos

    {nb, ['G'gcode], [' X'xpos], [' Y'ypos], [' Z'zpos], ' A'a }
endp

;-------------------

@line_4x
    gcode = 1
  
    local numeric a
    a = -cpos

    {nb, ['G'gcode], [' X'xpos], [' Y'ypos], [' Z'zpos], [' A'a], [' F'feed] }
endp

;-------------------

@move_5x
    gcode = 0
  
    local numeric x, y, z, a
	x = -xtpos
	y = ytpos
    z = -ztpos
    a = 180 + apos
    
    {nb, ['G'gcode], [' X'x], [' Y'y], [' Z'z], [' A'a] }
endp

;-------------------

@line_5x
    gcode = 1
    
    local numeric x, y, z, a
	x = -xtpos
	y = ytpos
    z = -ztpos
    a = 180 + apos
    
    {nb, ['G'gcode], [' X'x], [' Y'y], [' Z'z], [' A'a], [' F'feed] }
endp

;-------------------

@arc
    if arc_direction eq CCW then
        gcode = 3
    else ; CW
        gcode = 2
    endif
    {nb, ['G'gcode], [' X'xpos], [' Y'ypos], [' Z'zpos] }
    if arc_size eq 360 then
        {' I'xcenter_rel, ' J'ycenter_rel}
    else
            if arc_size gt 180 then
                radius = -radius
            endif
            {' R'radius}
    endif
    {[' F'feed]}
endp

;-------------------

@compensation
    if side eq COMP_LEFT then
        gcode = 41
    endif
    if side eq COMP_RIGHT then
        gcode = 42
    endif
    if side eq COMP_OFF then
        gcode = 40
    endif
    {nb, 'G'gcode,' '}
    if side ne COMP_OFF
        {'D'(offset_number), ' '}
    endif
    skipline = FALSE
endp

;-------------------

@change_ref_point
    ; Given in absolute mode
    gcode = 10
    {nb, 'G91 G'gcode, 'L2 P'home_number ' X'xhome, ' Y'yhome, ' Z'zhome}
    {nb, 'G90'}
endp

;-------------------

@home_number
    gcode = 53 + home_number
    {nb, 'G'gcode}

    ;{' A'(-angle_4x_around_x):'5.3(p)'}
endp

;-------------------

@rotate
    if rotate_cancel then
        gcode = 69
        {nb, 'G'gcode}
    else
        gcode = 68
        {nb, 'G'gcode, ' X0 Y0 G91 R'angle}
        {nb, 'G90'}
    endif
endp

;-------------------

@fourth_axis
    gcode = 0
    {nb, 'G'gcode, ' A'angle}
endp

;-------------------

@change_tool
    local logical save_blknum_gen
    if machine_plane eq XY
         gcode = 17
    endif
    if machine_plane eq ZX
         gcode = 18
    endif
    
    {nb, '(Tool # 'tool_number,' - Diameter 'tool_diameter,' D'tool_number,' H'tool_number, ')'}

    mcode = 6
    {nb, 'T'tool_number,' M' mcode' D'tool_number ' H'tool_number}
    call @start_tool
    call @home_number
endp

;-------------------

@drill
    call @move_4x

    gcode = 98 ; default value

    if drill_type eq G81 then
        gcode = 81
    endif
    if drill_type eq G82 then
        gcode = 82
    endif
    if drill_type eq G83 then
        gcode = 83
    endif
    if drill_type eq G84 then
        gcode = 84
    endif
    if drill_type eq G85 then
        gcode = 85
    endif
    if drill_type eq G86 then
        gcode = 86
    endif
    if drill_type eq G89 then
        gcode = 89
    endif
    {nb, 'G'gcode, ' Z'drill_lower_z, ' R'drill_upper_z}
    if drill_type eq G83 then
        {' Q'stepdown}
        {' P'dwell:'7.0(*1000P)'}
    endif
    if drill_type eq G82 then
        {' P'dwell:'7.0(*1000P)'}
    endif
    if drill_type eq G84 then
        feed = spin * pitch
    endif

    {' F'feed}

endp

;-------------------

@drill_point
    if not first_drill then
        {nb, ' ', ' X'xpos, ' Y'ypos}
    endif
endp

;-------------------

@drill4x_pnt
    if not first_drill then
		call @drill
   endif
endp

;-------------------

@mirror
    if mirror_type eq MIRROR_OFF then
        {nb, 'G50.1 X0 Y0'}
    else
        {nb, 'G51.1 '}
        if mirror_type eq MIRROR_X then
            {'X1 Y0'}
        endif
        if mirror_type eq MIRROR_Y then
            {'X0 Y1'}
        endif
        if mirror_type eq MIRROR_XY then
            {'X1 Y1'}
        endif
    endif
endp

;-------------------

@end_drill
    gcode = 80
    {nb, 'G'gcode}
endp

;-------------------

@halt_program
    {' M0'}
endp

;--------------------

@round_comp
    ; NOP
endp

;--------------------

@start_of_job
    ;{nb, '( ----------------------------- )'}
    {nb, '( ---- Start of 'job_name' ---- )'}

    if msg ne ''
        {nb, '('msg, ')'}
    endif
    
    ;{nb, nl, '( rax='rotate_angle_x, ' ray='rotate_angle_y, ')'}
    ;{nb, nl, '( a4xax='angle_4x_around_x , ' a4xay='angle_4x_around_y, ' )' }

    ; TODO: move up and rotate A only if necessary
;   if change(angle_4x_around_x)
;       {'( >>> angle_4x_around_x changed <<<)'}
;   endif

    if fourth_axis_used eq false and rotate_used eq false then 
        ;{nl, '( >>> angle_4x_around_x to be updated <<<)'}

        {nb, 'G0 G53 Z'(tool_z_level):'5.3(p)', '  ; move up to tool_z_level'}
        
        ;{nb, 'G0 G53 Z'clearance_level, , '; clearance_level'}
        ;{nb, 'G0 G53 Z0'}
        
        {nb, 'G0 G53 A'(-angle_4x_around_y):'5.3(p)'}
    endif

endp

;--------------------

@end_of_job
    {nb, '( ---- End of 'job_name' ---- )'}  
endp

;--------------------

@delay
    gcode = 4
    {nb, 'G'gcode, ' P'delay_period:integer_def_f}
endp

;-------------------

@dwell 
	delay_period = dwell_time
	call @delay
endp

;--------------------

@cool_mist
	if mist_coolant then
		{nb, 'M7'}
	else
		{nb, 'M9'}
	endif
endp

;--------------------

@cool_flood
	if flood_coolant then
		{nb, 'M8'}
	else
		{nb, 'M9'}
	endif
endp

;--------------------

@message
   {nb, '( ', message, ' )'}
endp

;-------------------

@mco_message
	call @message
endp

;--------------------

@move_object
	local string machine_coords
	local numeric xpos, ypos, zpos, apos
	
	machine_coords = ' G53' ; abs coords by default
	
	if MCO_CoordSysType eq 1 then ; machine / abs coordinates
		machine_coords = ' G53'
		xpos = move_axis_x
		ypos = move_axis_y
		zpos = move_axis_z
		apos = move_axis_a
	else	; part coordinates
		machine_coords = ''
		xpos = xh_move
		ypos = yh_move
		zpos = zh_move
		apos = ah_move
	endif

	if is_rapid_move then
		{nb, 'G0', machine_coords, ' X'xpos, ' Y'ypos, ' Z'zpos, [' A'apos] }
	else
		{nb, 'G1', machine_coords, ' X'xpos, ' Y'ypos, ' Z'zpos, [' A'apos], [' F'feed_move] }
	endif
endp

;--------------------

@assign_axis
    ; TODO
endp

;-------------------

;     =======================
;     USER DEFINED PROCEDURES
;     =======================

@call_simple_proc
    active(message) = FALSE
    active(parm1)   = FALSE
    active(parm2)   = FALSE
    active(parm3)   = FALSE
    proc_count      = 1
    call @call_proc
endp

;-------------------

@start_tool
    if tool_direction eq CW then
        mcode = 3
    else              ;  CCW
        mcode = 4
    endif

    {nb, 'S'spin:integer_def_f, ' M'mcode}
    {nb, 'M8'}
endp

;-------------------

@stop_tool
    {nb, ' M5'}
endp

;-------------------
